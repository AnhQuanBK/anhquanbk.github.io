var d=Object.defineProperty;var g=(h,a,c)=>a in h?d(h,a,{enumerable:!0,configurable:!0,writable:!0,value:c}):h[a]=c;var e=(h,a,c)=>g(h,typeof a!="symbol"?a+"":a,c);System.register(["./core.js"],function(h,a){"use strict";var c,p;return{setters:[o=>{c=o.P,p=o.C}],execute:function(){class o{constructor(i,t){e(this,"options");e(this,"performance");e(this,"isRunning",!1);e(this,"checkTimer");e(this,"fpsHistory");e(this,"actualFPS",0);e(this,"start",()=>{this.isRunning||(this.isRunning=!0,this.checkTimer=this.options.CheckInterval,this.fpsHistory=[])});e(this,"stop",()=>{this.isRunning&&(this.isRunning=!1,this.options.OnlyUpdateWhenSwitchScene&&this.checkFps())});e(this,"postStep",i=>{this.isRunning&&(this.checkTimer-=i,!(this.checkTimer>0)&&(this.checkTimer+=this.options.CheckInterval,this.fpsHistory.push(this.actualFPS),this.options.OnlyUpdateWhenSwitchScene||this.fpsHistory.length>=5&&this.checkFps()))});this.options=t,this.performance=i}checkFps(){if(this.fpsHistory.length===0)return;let i=!1;this.options.AutoUpgradeQuality&&this.isHighFps()&&(i=this.performance.upgradeGraphicsQuality()),this.isLowFps()&&(i=this.performance.downgradeGraphicsQuality()),i&&(this.fpsHistory=[])}getFpsMedian(){return this.getMedian(this.fpsHistory)}getMedian(i){if(i.length===0)return Number.NaN;const t=i.sort((r,n)=>r-n),s=Math.floor(t.length/2);return t.length%2===0?(t[s-1]+t[s])/2:t[s]}isLowFps(){return this.getFpsMedian()<this.options.FpsThreshold}isHighFps(){return this.getFpsMedian()>this.options.FpsThreshold*1.2}}class u extends c.Plugins.BasePlugin{constructor(){super(...arguments);e(this,"enabled",!1);e(this,"quality");e(this,"fpsTracker");e(this,"pixelRatio");e(this,"trackingSceneNames",[]);e(this,"trackingScene",t=>{this.trackingSceneNames.indexOf(t)<0||(this.stopFPSTracker(),this.startFPSTracker())});e(this,"startFPSTracker",()=>{this.fpsTracker.start()});e(this,"stopFPSTracker",()=>{this.fpsTracker.stop()})}configure(t){const{Enabled:s,Quality:r,Options:n,TrackingSceneNames:f}=t;this.enabled=s,this.quality=r,this.pixelRatio=window.devicePixelRatio,this.trackingSceneNames=f,this.createFPSTracker(n)}getCurrentQuality(){return this.pixelRatio}downgradeGraphicsQuality(){const{Min:t,AdjustStep:s}=this.quality,r=this.pixelRatio;if(r<=t)return!1;const n=+(r-s).toFixed(2);return n<t?!1:(this.pixelRatio=n,this.resizeGameWorld(this.pixelRatio),!0)}upgradeGraphicsQuality(){const{Max:t,AdjustStep:s}=this.quality,r=this.pixelRatio;if(r>=t)return!1;const n=+(r+s).toFixed(2);return n>t?!1:(this.pixelRatio=n,this.resizeGameWorld(this.pixelRatio),!0)}createFPSTracker(t){this.fpsTracker=new o(this,t)}get event(){return this.game.event}resizeGameWorld(t){const s={forcePixelRatio:t};this.event.emit(p.REQUEST_RESIZE_GAME,s)}updatePostStepDeltaTime(t){this.fpsTracker.postStep(t)}updateActualFPS(t){this.fpsTracker.actualFPS=t}}h("default",u)}}});
